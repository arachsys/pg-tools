#!/bin/perl -w

use Getopt::Std;
use POSIX;
use strict;

my $serialport = '/dev/ttyS0';

sub initport($) {
  my $serialport = shift;
  sysopen PORT, $serialport, O_RDWR | O_NOCTTY | O_NONBLOCK
    or die "$! opening device $serialport\n";

  my $termios = new POSIX::Termios;
  $termios->getattr(fileno PORT);
  $termios->setcflag(CS8 | CREAD | CLOCAL);
  $termios->setiflag(0);
  $termios->setlflag(0);
  $termios->setoflag(0);

  sub B57600 { 0010001 };
  $termios->setospeed(&B57600);
  $termios->setispeed(&B57600);

  $termios->setattr(fileno PORT, TCSAFLUSH);
  tcflush(fileno PORT, TCIOFLUSH);
  return *PORT;
}

sub request($$) {
  my ($fh, $req, $sum, $asc, $res) = (shift, shift, 0, 0, "");
  foreach $asc (unpack 'C*', $req) {
    $sum ^= $asc;
  }
  $req = sprintf "\$%s*%02X\015\012", $req, $sum;
  syswrite $fh, $req, length $req;

  until ($res =~ /\021$/s) {
    my $rin = ""; vec($rin, fileno $fh, 1) = 1;
    last unless (select $rin, undef, $rin, 0.5)[0] > 0;
    my $bytes; sysread $fh, $bytes, 16384;
    $res .= $bytes;
  }
  $res =~ s/^\023//s; $res =~ s/\021$//s; $res =~ s/\015?\012/\n/sg;
  return $res;
}

sub getinfo($) {
  my $fh = shift;
  my $response = request $fh, 'PBRSNP,';
  if ($response =~ /^\$PBRSNP,(.*?)(\*[A-F\d]+)?$/i) {
    my ($instrument, $pilot, $serial, $version) = split /,\s*/, $1;
    print <<"EOF";
Instrument: $instrument (serial number $serial, version $version)
Pilot name: $pilot
EOF
  }
}

sub listtracks($) {
  my ($fh, $list) = (shift, "");
  my $response = request $fh, 'PBRTL,';
  foreach my $line (split /\n+/, $response) {
    if ($line =~ /^\$PBRTL,\d*,(\d*),([\d.]*),([\d:]*),([\d:]*)(\*[A-F\d]+)?$/i) {
      my ($id, $date, $time, $duration) = ($1, $2, $3, $4);
      $date =~ s/^(\d{2})\.(\d{2})\.(\d{2})$/20$3-$2-$1/;
      $list .= sprintf "%2s  %-10s  %-8s  %-8s\n", $id, $date, $time, $duration;
    }
  }
  printf "%2s  %-10s  %-8s  %-8s\n%s", "Id", "Date", "Time", "Duration", $list
    unless $list eq "";
}

sub gettrack($$) {
  my ($fh, $num) = (shift, shift);
  return request $fh, ($num >= 0 ? sprintf 'PBRTR,%02d', $num : 'PBRIGC,');
}

sub getall($) {
  my $fh = shift;
  my $response = request $fh, 'PBRTL,';

  my (%track, %index);
  foreach my $line (split /\n+/, $response) {
    if ($line =~ /^\$PBRTL,\d*,(\d*),([\d.]*),([\d:]*),([\d:]*)(\*[A-F\d]+)?$/i) {
      my ($id, $date, $time) = ($1, $2, $3);
      $date =~ s/^(\d{2})\.(\d{2})\.(\d{2})$/20$3-$2-$1/;
      $time =~ s/^(\d{2}):(\d{2}):\d{2}$/$1:$2/;
      my $name = "$date-$time";
      if (defined $index{$name}) {
        unless (defined $index{"$name-1"}) {
          $index{"$name-1"} = $index{$name};
          $track{$index{$name}} = "$name-1";
        }
        my $i = 2; $i++ while defined $index{"$name-$i"};
        $name .= "-$i";
      }
      $track{$id} = $name;
      $index{$name} = $id;
    }
  }

  my $success = 0;
  foreach my $id (sort keys %track) {
    my $igcdata = gettrack $fh, $id;
    warn "Failed to download track #$id\n" and next if $igcdata eq "";
    if (sysopen TRACK, "$track{$id}.igc", O_WRONLY | O_CREAT | O_EXCL) {
      print TRACK $igcdata;
      close TRACK;
      $success++;
    } else {
      warn "File '$track{$id}.igc' already exists or can't be created\n";
    }
  }

  my $total = keys %track;
  if ($success == $total) {
    print STDERR "Successfully downloaded all $success tracks\n";
  } elsif ($success > 0) {
    print STDERR "Successfully downloaded $success tracks of $total\n";
  } else {
    print STDERR "No tracks downloaded\n";
  }
}

sub usage() {
  print STDERR <<"EOF";
Usage: compeoigc [-d PORT] [list]   list tracks stored on device
       compeoigc [-d PORT] info     display device/pilot info
       compeoigc [-d PORT] current  output last viewed track in IGC format
       compeoigc [-d PORT] TRACKNO  output specified track in IGC format
       compeoigc [-d PORT] all      download all tracks in IGC format
Default serial port: $serialport
EOF
  exit 1;
}

sub HELP_MESSAGE { usage; }
sub VERSION_MESSAGE { usage; }

my %option = ();
getopts "d:", \%option or usage;
usage if @ARGV > 0 and lc $ARGV[0] eq 'help';

if ($> == $< and $) == $() {
  $serialport = $ENV{COMPEO} if defined $ENV{COMPEO};
  $serialport = $option{d} if defined $option{d};
}
my $fh = initport $serialport;
$> = $< unless $> == $<;
$) = $( unless $) == $(;

my $command = (@ARGV == 0 ? 'list' : lc shift @ARGV);
usage unless @ARGV == 0;
if ($command eq 'list') {
  listtracks $fh;
} elsif ($command eq 'info') {
  getinfo $fh;
} elsif ($command eq 'current') {
  print gettrack $fh, -1;
} elsif ($command eq 'all') {
  getall $fh;
} elsif ($command =~ /^\d+$/) {
  print gettrack $fh, $command;
} else {
  usage;
}
