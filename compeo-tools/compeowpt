#!/bin/perl -w

use Getopt::Std;
use POSIX;
use strict;

my $serialport = '/dev/ttyS0';

sub initport($) {
  my $serialport = shift;
  sysopen PORT, $serialport, O_RDWR | O_NOCTTY | O_NONBLOCK
    or die "$! opening device $serialport\n";

  my $termios = new POSIX::Termios;
  $termios->getattr(fileno PORT);
  $termios->setcflag(CS8 | CREAD | CLOCAL);
  $termios->setiflag(0);
  $termios->setlflag(0);
  $termios->setoflag(0);

  sub B57600 { 0010001 };
  $termios->setospeed(&B57600);
  $termios->setispeed(&B57600);

  $termios->setattr(fileno PORT, TCSAFLUSH);
  tcflush(fileno PORT, TCIOFLUSH);
  return *PORT;
}

sub request($$) {
  my ($fh, $req, $sum, $asc, $res) = (shift, shift, 0, 0, "");
  foreach $asc (unpack 'C*', $req) {
    $sum ^= $asc;
  }
  $req = sprintf "\$%s*%02X\015\012", $req, $sum;
  syswrite $fh, $req, length $req;

  until ($res =~ /\021$/s) {
    my $rin = ""; vec($rin, fileno $fh, 1) = 1;
    last unless (select $rin, undef, $rin, 0.5)[0] > 0;
    my $bytes; sysread $fh, $bytes, 16384;
    $res .= $bytes;
  }
  $res =~ s/^\023//s; $res =~ s/\021$//s; $res =~ s/\015?\012/\n/sg;
  return $res;
}

sub listpoints($) {
  my $fh = shift;
  my $response = request $fh, 'PBRWPS,';
  foreach (split /\n+/, $response) {
    next unless /^\$PBRWPS,(.*?)(\*[A-F\d]+)?$/i;
    my @point = split /,/, $1;
    my $latitude = substr($point[0], 0, 2) + substr($point[0], 2)/60.0;
    my $longitude = substr($point[2], 0, 3) + substr($point[2], 3)/60.0;
    $latitude = -$latitude if uc $point[1] eq 'S';
    $longitude = -$longitude if uc $point[3] eq 'W';
    my $name = $point[5] =~ /\S/ ? $point[5] : $point[4]; $name =~ s/\s+$//;
    printf "%+0.6f, %+0.6f, %04d, %s\n", $latitude, $longitude,
           $point[6], $name;
  }
}

sub delpoint($$) {
  my ($fh, $name) = (shift, shift);
  request $fh, sprintf 'PBRWPX,%-17.17s', $name;
}

sub clearpoints($) {
  my $fh = shift;
  request $fh, 'PBRWPX,,';
}

sub addpoints($) {
  my $fh = shift;
  while (my $line = <STDIN>) {
    chomp $line;
    my ($latitude, $longitude, $altitude, $name) = split /\s*,\s*/, $line, 4;
    return unless $latitude =~ /^[-+]?\d+(\.\d+)?$/;
    return unless $longitude =~ /^[-+]?\d+(\.\d+)?$/;
    return if abs($latitude) > 90.0 or abs($longitude) > 180.0;
    $latitude = sprintf '%02d%06.3f,%s', abs(int $latitude),
      60*abs($latitude - int $latitude), $latitude < 0 ? 'S' : 'N';
    $longitude = sprintf '%03d%06.3f,%s', abs(int $longitude),
      60*abs($longitude - int $longitude), $longitude < 0 ? 'W' : 'E';
    request $fh, sprintf "PBRWPR,%s,%s,,%-17.17s,%04d", $latitude,
                         $longitude, $name, $altitude;
  }
}

sub listroutes($) {
  my $fh = shift;
  my $response = request $fh, 'PBRRTS,';
  foreach (split /\n+/, $response) {
    next unless /^\$PBRRTS,(\d+),(\d+),(\d+),(.*?)(\*[A-F\d]+)?$/i;
    if ($3 == 0) {
      my $name = $4; $name =~ s/\s+$//;
      print $name, "\n";
    }
  }
}

sub getroute($$) {
  my ($fh, $id) = (shift, undef);
  my $name = sprintf '%-17.17s', shift;
  my $response = request $fh, 'PBRRTS,';
  foreach (split /\n+/, $response) {
    next unless /^\$PBRRTS,(\d+),(\d+),(\d+),(.*?)(\*[A-F\d]+)?$/i;
    $id = $2 if $3 == 0 and $name eq $4;
    if ($3 > 0 and defined $id and $2 == $id) {
      my $waypoint = (split /,/, $4, 2)[1];
      $waypoint =~ s/\s+$//;
      print $waypoint, "\n";
    }
  }
}

sub delroute($$) {
  my ($fh, $name) = (shift, shift);
  my $request = sprintf "PBRRTX,%-17.17s", $name;
  request $fh, $request;
}

sub clearroutes($) {
  my $fh = shift;
  request $fh, 'PBRRTX,,';
}

sub setroute($$) {
  my ($fh, $id) = (shift, undef);
  my $name = sprintf '%-17.17s', shift;

  if ($name eq 'COMPETITION-ROUTE') {
    $id = 0;
  } else {
    my %routes = ();
    my $response = request $fh, 'PBRRTS,';
    foreach (split /\n+/, $response) {
      next unless /^\$PBRRTS,(\d+),(\d+),(\d+),(.*?)(\*[A-F\d]+)?$/i;
      $id = int $2 if $3 == 0 and $name eq $4;
      $routes{int $2} = $4;
    }
    unless (defined $id) {
      $id = 1; $id++ while defined $routes{$id};
    }
  }

  my @route; while (<STDIN>) { chomp; push @route, $_; }

  my ($index, $length) = (1, 1 + @route);
  request $fh, sprintf 'PBRRTR,%02d,%02d,00,%s', $id, $length, $name;
  request $fh, sprintf 'PBRRTR,%02d,%02d,%02d,,%-17.17s', $id, $length,
                       $index++, shift @route while @route;
}

sub usage() {
  print STDERR <<"EOF";
Usage: compeowpt [-d PORT] [list]         list waypoints stored on device
       compeowpt [-d PORT] add [FILE]...  add new waypoints to device
       compeowpt [-d PORT] del NAME       delete waypoint NAME from device
       compeowpt [-d PORT] clear          delete all waypoints from device
       compeowpt [-d PORT] listroutes     list routes stored on device
       compeowpt [-d PORT] getroute NAME  read route NAME from device
       compeowpt [-d PORT] gettask        read competition route from device
       compeowpt [-d PORT] setroute NAME  send route NAME to device
       compeowpt [-d PORT] settask        send competition route to device
       compeowpt [-d PORT] delroute NAME  delete route NAME from device
       compeowpt [-d PORT] clearroutes    delete all routes from device
Default serial port: $serialport

Waypoint and route names are case-sensitive and at most 17 chars long.
The route name 'COMPETITION-ROUTE' refers to the special competition route.
EOF
  exit 1;
}

sub HELP_MESSAGE { usage; }
sub VERSION_MESSAGE { usage; }

my %option = ();
getopts "d:", \%option or usage;
usage if @ARGV > 0 and lc $ARGV[0] eq 'help';

if ($> == $< and $) == $() {
  $serialport = $ENV{COMPEO} if defined $ENV{COMPEO};
  $serialport = $option{d} if defined $option{d};
}
my $fh = initport $serialport;
$> = $< unless $> == $<;
$) = $( unless $) == $(;

my $command = (@ARGV == 0 ? 'list' : lc shift @ARGV);
if ($command eq 'list' and @ARGV == 0) {
  listpoints $fh;
} elsif ($command eq 'add') {
  addpoints $fh if @ARGV == 0;
  while (@ARGV > 0) {
    my $file = shift @ARGV;
    if (sysopen STDIN, $file, O_RDONLY) {
      addpoints $fh;
    } else {
      warn "Can't open $file: $!\n";
    }
  }
} elsif ($command eq 'del' and @ARGV == 1) {
  delpoint $fh, $ARGV[0];
} elsif ($command eq 'clear' and @ARGV == 0) {
  clearpoints $fh;
} elsif ($command eq 'listroutes' and @ARGV == 0) {
  listroutes $fh;
} elsif ($command eq 'getroute' and @ARGV == 1) {
  getroute $fh, $ARGV[0];
} elsif ($command eq 'gettask' and @ARGV == 0) {
  getroute $fh, 'COMPETITION-ROUTE';
} elsif ($command eq 'setroute' and @ARGV == 1) {
  setroute $fh, $ARGV[0];
} elsif ($command eq 'settask' and @ARGV == 0) {
  setroute $fh, 'COMPETITION-ROUTE';
} elsif ($command eq 'setroute' and @ARGV == 2) {
  if (sysopen STDIN, $ARGV[1], O_RDONLY) {
    setroute $fh, $ARGV[0];
  } else {
    die "Can't open $ARGV[1]: $!\n";
  }
} elsif ($command eq 'settask' and @ARGV == 1) {
  if (sysopen STDIN, $ARGV[0], O_RDONLY) {
    setroute $fh, 'COMPETITION-ROUTE';
  } else {
    die "Can't open $ARGV[0]: $!\n";
  }
} elsif ($command eq 'delroute' and @ARGV == 1) {
  delroute $fh, $ARGV[0];
} elsif ($command eq 'clearroutes' and @ARGV == 0) {
  clearroutes $fh;
} else {
  usage;
}
